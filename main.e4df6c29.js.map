{"version":3,"sources":["scripts/main.js"],"names":["baseUrl","body","document","querySelector","request","url","fetch","then","response","json","getPhones","phones","getFirstReceivedDetails","getAllSuccessfulDetails","getThreeFastestDetails","catch","error","Error","arr","Promise","race","map","id","createDom","all","el1","el2","el3","className","header","insertAdjacentHTML","name","join"],"mappings":";AAAA,aAEA,IAAMA,EAAU,mEAEVC,EAAOC,SAASC,cAAc,QAE9BC,EAAU,WAACC,IAAAA,EAAM,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACdC,OAAAA,MAASN,GAAAA,OAAAA,GAAUK,OAAAA,EAAnB,UACJE,KAAK,SAAAC,GAAYA,OAAAA,EAASC,UAGzBC,EAAY,WAChBN,IACGG,KAAK,SAAAI,GACJC,EAAwBD,GACxBE,EAAwBF,GACxBG,EAAuBH,KAExBI,MAAM,SAAAC,GAAS,OAAA,IAAIC,MAAMD,MAGxBJ,EAA0B,SAACM,GAC/BC,QAAQC,KAAKF,EAAIG,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GACtBlB,OAAAA,EAAYkB,IAAAA,OAAAA,OACXf,KAAK,SAAAI,GACJY,OAAAA,EAAU,CAACZ,GAAS,iBAAkB,qBAGtCE,EAA0B,SAACK,GAC/BC,QAAQK,IAAIN,EAAIG,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GACrBlB,OAAAA,EAAYkB,IAAAA,OAAAA,OACXf,KAAK,SAAAI,GACJY,OAAAA,EAAUZ,EAAQ,iBAAkB,qBAGpCG,EAAyB,SAACI,GACxBO,IAAAA,EAAMN,QAAQC,KAAKF,EAAIG,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAASlB,OAAAA,EAAYkB,IAAAA,OAAAA,OACnDI,EAAMP,QAAQC,KAAKF,EAAIG,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAASlB,OAAAA,EAAYkB,IAAAA,OAAAA,OACnDK,EAAMR,QAAQC,KAAKF,EAAIG,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAASlB,OAAAA,EAAYkB,IAAAA,OAAAA,OAEzDH,QAAQK,IAAI,CAACC,EAAKC,EAAKC,IAAMpB,KAAK,SAAAI,GAChCY,OAAAA,EAAUZ,EAAQ,cAAe,2BAG/BY,EAAY,SAACZ,EAAQiB,EAAWC,GACpC5B,EAAK6B,mBAAmB,YACTF,oBAAAA,OAAAA,EACLC,iBAAAA,OAAAA,EAEFlB,+BAAAA,OAAAA,EAAOU,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAAIS,EAAAA,EAAAA,KAAsBT,MAAAA,WAAAA,OAAAA,EAAYS,WAAAA,OAAAA,EAAzC,WAAsDC,KAAK,IAJ9E,mCAUFtB","file":"main.e4df6c29.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst baseUrl = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\n\nconst body = document.querySelector('body');\n\nconst request = (url = '') => {\n  return fetch(`${baseUrl}${url}.json`)\n    .then(response => response.json());\n};\n\nconst getPhones = () => {\n  request()\n    .then(phones => {\n      getFirstReceivedDetails(phones);\n      getAllSuccessfulDetails(phones);\n      getThreeFastestDetails(phones);\n    })\n    .catch(error => new Error(error));\n};\n\nconst getFirstReceivedDetails = (arr) => {\n  Promise.race(arr.map(({ id }) =>\n    request(`/${id}`)))\n    .then(phones =>\n      createDom([phones], 'first-received', 'First Received'));\n};\n\nconst getAllSuccessfulDetails = (arr) => {\n  Promise.all(arr.map(({ id }) =>\n    request(`/${id}`)))\n    .then(phones =>\n      createDom(phones, 'all-successful', 'All Successful'));\n};\n\nconst getThreeFastestDetails = (arr) => {\n  const el1 = Promise.race(arr.map(({ id }) => request(`/${id}`)));\n  const el2 = Promise.race(arr.map(({ id }) => request(`/${id}`)));\n  const el3 = Promise.race(arr.map(({ id }) => request(`/${id}`)));\n\n  Promise.all([el1, el2, el3]).then(phones =>\n    createDom(phones, 'first-three', 'First Three Received'));\n};\n\nconst createDom = (phones, className, header) => {\n  body.insertAdjacentHTML('beforeend', `\n    <div class=${className}>\n      <h3>${header}</h3>\n      <ul>\n        ${phones.map(({ id, name }) => `<li>id: ${id} name: ${name}</li>`).join('')}\n      </ul>\n    </div>\n  `);\n};\n\ngetPhones();\n"]}